{"name":"Rajah","tagline":"Rajah is Jasmine runner for Google apps script.","body":"# Rajah\r\n\r\njapanese version is [here](https://github.com/tyskdm/rajah/wiki).\r\n\r\n\r\n## What's rajah\r\n\r\n1. [Jasmine](https://github.com/pivotal/jasmine/wiki) runner for [Google apps script](https://developers.google.com/apps-script/).\r\n\r\n2. `Logger.log()` viewer.\r\n\r\n- Sample GAS project using rajah is [here](https://script.google.com/d/1D6qmc_sIehOP-p6__Z29uSQTbGYrcTF0wXIwWgsD2Hba8Onjf6EWrRym/edit).\r\n\r\n## Installation\r\n\r\n**1. Import Rajah libraly.**\r\n\r\nYou can try Raja lib instantly:\r\n- Project key = < Mn7JlN4wYLKUhi13E3mbpdVJodnbMh4p7 >\r\n- Import that Project key into your project as a library.\r\n\r\n\r\n**2. Add small code into your GAS project.**\r\n\r\n```js\r\nrajah.init(this);\r\nfunction doGet(e) {\r\n    return Rajah.doGet(e);\r\n};\r\n```\r\n\r\n- `Rajah.init()` should be called **before** using jasmine(`describe()`, etc,..). \r\n\r\n**3. Deploy your GAS project as a web service.**\r\n\r\n1. Save project and add version number ('File' menu > 'Manage version')\r\n2. Deploy web service ('Publish' menu > 'Deploy as web app')\r\n\r\n**4. Access web service.**\r\n\r\n- **USE** web app URL for latest code, showed `Test web app for your latest code.`\r\n\r\n\r\n### Create your own library (if you need)\r\n\r\n1. Create Rajah lib project : create GAS project and put following three files in.\r\n    1. rajah.gs : It's [here](https://github.com/tyskdm/rajah/blob/master/gs/rajah.gs). and it should be first file in your project. keep this order.\r\n    2. jasmine.js : from github >> [here](https://github.com/pivotal/jasmine/blob/master/lib/jasmine-core/jasmine.js)\r\n    3. ConsoleReporter.js : from github >> [here](https://github.com/pivotal/jasmine/blob/master/src/console/ConsoleReporter.js)\r\n\r\n2. Import to your GAS project.\r\n\r\n\r\n## Usage\r\n\r\n**Sample project using Rajah lib. is [here](https://script.google.com/d/1D6qmc_sIehOP-p6__Z29uSQTbGYrcTF0wXIwWgsD2Hba8Onjf6EWrRym/edit).**\r\n\r\n\r\nTested functions are:\r\n\r\n- `describe()` , `xdescribe()`\r\n- `it()` , `xit()`\r\n- `expect()`\r\n\r\nFollowing methods have **not** been tested enough.\r\n\r\n- `spyOn()`\r\n- `run()`, `wait()`, `waitsFor()`\r\n\r\n\r\n## Limitation\r\n\r\nAs you know, GAS doesn't provide following timer services.\r\n\r\n- `setTimeout()`, `clearTimeout()`, `setInterval()`, `clearInteval()`\r\n\r\nAnd jasmine use them, so Rajah has dummyTimer functions internaly based on `Utilities.sleep()`\r\n\r\nBut It's not clean way, so Rajah does not open these functions to global namespace.\r\n\r\nIf you need use them, access as follows:\r\n\r\n````js\r\nfunction setTimer(func, t) {\r\n    return rajah.setTimer(func, t);\r\n}\r\n````\r\n\r\n\r\n## Wish list\r\n\r\n- Visual Reporter and Filter\r\n\r\n- console.log >> http://minipaca.net/blog/javascript/firebug-console-api/\r\n\r\n- Execute in debbug mode.\r\n\r\n    - Execute from debbug main function (not by button)\r\n\r\n    - Step by step console.log display\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}